Разработчики (dev) – люди, которые пишут код, добавляют новые функции в программу (фичи) и исправляют баги.

Системные администраторы (opsадмины) – специалисты, которые поддерживают серверы, следят за доступностью сайтасервиса и боятся лишних изменений, чтобы не “уронить” систему.

Релиз – момент, когда новую версию приложения выкатывают (запускают) “вживую” для пользователей.

Agile – гибкая методология разработки, где выпускают продукт чаще и маленькими “кусочками”, получая быструю обратную связь.

Спринт – короткий период (1–2 недели) в AgileScrum, за который команда делает определённый набор задач или фич.

Планирование фич — DevOps заранее спрашивает, как тестировать, какие ресурсы понадобятся, нужен ли автоскейлинг, чтобы не возникало сюрпризов накануне релиза.
Скоординированные релизы — слаженная работа DevOps с QA, разработчиками, менеджерами, безопасниками все знают, когда и как будет выкатываться новая версия

DevOps – совокупность культуры и практик, объединяющих разработку (Dev) и эксплуатацию (Ops), чтобы быстрее и надёжнее выпускать обновления.

CICD (Continuous Integration  Continuous DeliveryDeployment) — это процесс, при котором каждое новое изменение в коде

Автоматически собирается и проверяется тестами (CI),
Автоматически разворачивается (CD) или готовится к развёртыванию.
Тесты и сборка — проверка кода (юнит, интеграционные тесты) и превращение его в рабочую программу (build). DevOps должен уметь их запускать автоматически (CICD).

Hard skills — конкретные, технические навыки (например, знание Linux, умение работать с Docker, настройка CICD). В отличие от “софт-скиллов”, это измеримые умения.

Linux — популярная операционная система для серверов. DevOps часто работает в командной строке Linux, чтобы настраивать сервисы, смотреть логи, управлять процессами.

Структура проекта — организация файлов, папок, зависимостей. DevOps ориентируется, как всё расположено, чтобы корректно прописать сборку, тесты и деплой.

Совместимость версий — следит, чтобы разработки и серверы имели одинаковые версии библиотек (Node.js, Python, Java), иначе “на моём компе работает, а у вас — нет”.

Автоматизация сборки — настройка единой командыскрипта, где разработчики не пишут что-то вручную, а DevOps прописывает всё в пайплайне (например, “npm install, npm test, npm run build”).

Настройка окружений — создание и восстановление серверов с помощью кодовых описаний (Ansible, Terraform), минимизируя ручные клики.

Ручной деплой — старая практика, когда файлы копировали вручную, сервис перезапускали руками, и легко было забыть поставить нужный пакет.
Автоматизация деплоя — DevOps настраивает CICD, который сам собирает и выкатывает новую версию на сервер.

Prometheus — инструмент, собирающий “метрики” (CPU, память, количество запросов), чтобы DevOps видел состояние сервиса в реальном времени.

Grafana — рисует красивые дашборды и графики из метрик Prometheus (или других источников).
Logstash — часть ELK, которая “принимает” логи с разных серверов, фильтрует их и отправляет в Elasticsearch для хранения и быстрых поисков.

Docker — платформа, позволяющая “упаковать” приложение и все зависимости в контейнер, чтобы оно одинаково работало везде.

Dockerfile — текстовый сценарий, описывающий, как собрать контейнер (установить пакеты, скопировать код, запустить приложение).
Kubernetes — оркестратор, который автоматически распределяет контейнеры по серверам, перезапускает упавшие и масштабирует, когда растёт нагрузка.

SSH (Secure Shell) — способ безопасно подключаться к серверу через командную строку. Позволяет DevOps зайти на удалённую машину и управлять ею.

sudo — команда, дающая временные права суперпользователя (root). Используется, когда нужен более высокий уровень доступа.

systemd — механизм управления службами (демонами) в современных Linux. Позволяет запускать, останавливать и автоматически поднимать сервисы после перезагрузки.

APT  yum  dnf  zypper — пакетные менеджеры для разных семейств Linux (UbuntuDebian, CentOSRedHat и т.д.). С их помощью устанавливают и обновляют пакеты (программы).

NAT (Network Address Translation) — механизм, позволяющий менять исходныецелевые IP-адреса при прохождении через маршрутизатор. Применяется для доступа в интернет из приватных сетей.

DNS — система, которая переводит доменные имена (myapp.ru) в IP-адреса.

A-запись — указывает IPv4-адрес, CNAME — псевдоним, TTL — время жизни записи в кэше.

HTTPHTTPS — протоколы для передачи веб-страниц (HTTPS с шифрованием).

SSL-сертификат — необходим, чтобы шифровать трафик и убрать предупреждения “недоверенный сайт”.

Pod — минимальная единица в Kubernetes, внутри которой запускаются контейнеры.

Deployment — объект, определяющий, сколько копий (реплик) подов нужно, и обновляет их автоматически.

Service — позволяет объединить поды в единый “сетевой сервис” с балансировкой

registry — хранилище Docker-образов (например, Docker Hub). Позволяет “пушить” образы и потом “пулить” их на другой сервер.

Jenkins — один из первых и популярных серверов для CICD

GitLab CI — CICD, встроенный в GitLab

GitHub Actions — платформа авто-сборки и деплоя, встроенная в GitHub

Ansible, Chef, Puppet — инструменты, которые описывают состояние серверов (какие пакеты установить, какие конфиги применить) и применяют его автоматически, чтоб не кликать вручную.

Terraform — IaC-инструмент, создающий ресурсы в облаке (виртуалки, сети) на основе файлов .tf. Позволяет “программировать” инфраструктуру

Zabbix — классическая система мониторинга. Умеет собирать метрики через агенты или SNMP, хранить их и отправлять предупреждения (алерты).

SNMP (Simple Network Management Protocol) — протокол для мониторинга сетевого оборудования (роутеров, свитчей, принтеров и т.д.), передаёт базовые метрики (трафик, состояние).

ELK — стэк для логирования ElasticSearch (хранение), Logstash (сборобработка) и Kibana (поиск и визуализация логов).

Fluentd — альтернатива Logstash, тоже собирает логи из разных источников и отправляет их в базу (Elastic и др.).

Bash — язык скриптов для автоматизации в Linux (циклы, условия, работа с файлами).

Python — более универсальный язык для CLI-утилит, автотестов, написания плагинов (Ansible, Terraform).

Go — язык, на котором написаны Kubernetes, Terraform, Docker, — даёт возможность глубже настраивать или писать плагины.